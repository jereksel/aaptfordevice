apply plugin: 'com.android.library'

apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

import org.apache.tools.ant.taskdefs.condition.Os
import java.nio.file.Files

import static java.nio.file.StandardCopyOption.REPLACE_EXISTING

def ndkDirProperty = null

if (project.rootProject.file('local.properties').exists()) {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    ndkDirProperty = properties.getProperty('ndk.dir')
}

if (!ndkDirProperty) {
    if (System.getenv("ANDROID_NDK_HOME")) {
        ndkDirProperty = System.getenv("ANDROID_NDK_HOME")
    } else {
        ndkDirProperty = System.getenv("ANDROID_HOME") + "/ndk-bundle/"
    }
}


android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"

    defaultConfig {
        minSdkVersion 22
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    sourceSets {
        main {
            jni.srcDirs = []
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    //From https://github.com/rmtheis/tess-two/blob/master/tess-two/build.gradle#L33
    // Call external ndk-build(.cmd) script to build the native code
    task ndkBuild(type: Exec) {
        def ndkDirPrefix = ndkDirProperty != null ? ndkDirProperty + '/' : ''

        def ndkBuildExt = Os.isFamily(Os.FAMILY_WINDOWS) ? ".cmd" : ""

        commandLine "${ndkDirPrefix}ndk-build${ndkBuildExt}", '-C', file('src/main/jni').absolutePath,
                '-j', Runtime.runtime.availableProcessors()

    }

    ndkBuild.doLast {
        file("src/main/jniLibs/armeabi-v7a/libaaptcomplete.so").parentFile.mkdirs()
        file("src/main/jniLibs/arm64-v8a/libaaptcomplete.so").parentFile.mkdirs()
        Files.copy(
                file("src/main/libs/armeabi-v7a/aaptcomplete").toPath(),
                file("src/main/jniLibs/armeabi-v7a/libaaptcomplete.so").toPath(),
                REPLACE_EXISTING
        )
        Files.copy(
                file("src/main/libs/arm64-v8a/aaptcomplete").toPath(),
                file("src/main/jniLibs/arm64-v8a/libaaptcomplete.so").toPath(),
                REPLACE_EXISTING
        )

    }

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkBuild
    }

}

//android.useDeprecatedNdk = true

dependencies {
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
}

def VERSION_NAME = "1.0"
def GROUP = "com.jereksel"

group = GROUP
version = VERSION_NAME

task sourceJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

publishing {
    publications {

        MyPublication(MavenPublication) {

            pom.withXml { xml ->

                def dependenciesNode = xml.asNode().appendNode('dependencies')

                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }

            groupId GROUP
            artifactId project.name
            artifact sourceJar
        }
    }
}

bintray {
    override = true
    publish = true
    user = System.getenv("BINTRAY_USER")
    key = System.getenv("BINTRAY_KEY")
    pkg {
        repo = 'maven'
        name = 'aapt'
        licenses = ['WTFPL']
        publish = true
        configurations = ['archives']
        vcsUrl = 'https://github.com/jereksel/aaptfordevice'
        version {
            name = VERSION_NAME
            released = new Date()
            vcsTag = "v${VERSION_NAME}"
        }
    }
    publications = ['MyPublication']
}
